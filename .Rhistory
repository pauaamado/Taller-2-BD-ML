df_hogares_test_variables <- df_hogares_test %>%
left_join(df_personas_test_educ, by = "id") %>%
left_join(df_personas_test_ocup) %>%
left_join(df_personas_test_mujeres_cab) %>%
left_join(df_personas_test_niños) %>%
mutate(hacinamiento = Nper/P5010,
tipo_vivienda = as.factor(P5090),
num_niños = ifelse(is.na(num_niños), 0, num_niños),
proporcion_cotizantes = ifelse(is.na(proporcion_cotizantes), 0, proporcion_cotizantes),
niños_madre = num_niños*mujer_soltera)
df_hogares_test_variables2 <- df_hogares_test_variables %>%
mutate(pobre =  predict(model_tuning, newdata = df_hogares_test_variables1, type = "raw")) %>%
select(id, pobre) %>%
mutate(pobre = ifelse(pobre == "Yes", 1, 0))
df_hogares_test_variables2 <- df_hogares_test_variables %>%
mutate(pobre =  predict(model_tuning, newdata = df_hogares_test_variables, type = "raw")) %>%
select(id, pobre) %>%
mutate(pobre = ifelse(pobre == "Yes", 1, 0))
write.table(df_hogares_test_variables2, file = "mode_tuning_specificity.csv", row.names = FALSE, sep = ",")
p_load("smotefamily")
install.packages("smotefamily")
library(smotefamily)
predictors<-colnames(df_hogares_train_backward  %>% select(Pobre, maximo_grado_educ, hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
smote_output <- SMOTE(X = df_hogares_train_backward[predictors],
target = train$Pobre,
K=5)
predictors<-colnames(df_hogares_train_backward  %>% select(Pobre, maximo_grado_educ, hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
df_hogares_train_backward[predictors]
View(df_hogares_train_backward)
predictors<-colnames(df_hogares_train_backward  %>% select(maximo_grado_educ, hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
smote_output <- SMOTE(X = df_hogares_train_backward[predictors],
target = df_hogares_train_backward$Pobre,
K=5)
df_hogares_train_backward[predictors]
predictors<-colnames(df_hogares_train_backward  %>% select(hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
smote_output <- SMOTE(X = df_hogares_train_backward[predictors],
target = df_hogares_train_backward$Pobre,
K=5)
df_hogares_train_backward$Pobre
View(df_hogares_train_backward)
df_hogares_train_smote <- df_hogares_train_backward %>%
mutate(maximo_grado_educ = as.numeric(maximo_grado_educ),
tipo_vivienda = as.numeric(tipo_viviendaa))
df_hogares_train_smote <- df_hogares_train_backward %>%
mutate(maximo_grado_educ = as.numeric(maximo_grado_educ),
tipo_vivienda = as.numeric(tipo_vivienda))
predictors<-colnames(df_hogares_train_smote  %>% select(maximo_grado_educ, hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
smote_output <- SMOTE(X = df_hogares_train_smote[predictors],
target = df_hogares_train_smote$Pobre,
K=5)
smote_output
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_backward)
X_train <- X_train[, -1]
head(X_train)
desempleado_logit_smote <- train(class ~.,
data = smote_output$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_backward)
X_train <- X_train[, -1]
head(X_train)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train[, -1]
head(X_train)
desempleado_logit_smote <- train(class ~.,
data = smote_output$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
smote_data <- SMOTE(X = X_train, target = df_hogares_train_smote$Pobre, K = 5)
X_train
head(X_train)
smote_data
smote_data <- SMOTE(X = X_train, target = df_hogares_train_smote$Pobre, K = 5)
X_train <- X_train
head(X_train)
smote_data <- SMOTE(X = X_train, target = df_hogares_train_smote$Pobre, K = 5)
df_hogares_train_smote
X_train
head(X_train)
smote_output
desempleado_logit_smote <- train(class ~.,
data = smote_output$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train
colnames(X_train)<-paste0("X",seq(1,30))
colnames(X_train)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train[-1]
colnames(X_train)<-paste0("X",seq(1,6))
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train[-1]
colnames(X_train)<-paste0("X",seq(1,6))
colnames(X_train)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train[, -1]
colnames(X_train)<-paste0("X",seq(1,6))
colnames(X_train)
X_train<-data.frame(X_train)
smote_data <- SMOTE(X = X_train, target = df_hogares_train_smote$Pobre, K = 5)
smote_data
desempleado_logit_smote <- train(class ~.,
data = smote_data$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
X_train
View(smote_data)
smote_data$data
str(smote_data$class)
(smote_data$class
smote_data$class
smote_data$class
str(smote_data$data$class)
desempleado_logit_smote <- train(class ~.,
data = smote_data$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
df_hogares_train_smote <- df_hogares_train_backward %>%
mutate(maximo_grado_educ = as.numeric(maximo_grado_educ),
tipo_vivienda = as.numeric(tipo_vivienda),
Pobre =factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
predictors<-colnames(df_hogares_train_smote  %>% select(maximo_grado_educ, hacinamiento, proporcion_cotizantes,  num_niños, mujer_soltera, tipo_vivienda))
smote_output <- SMOTE(X = df_hogares_train_smote[predictors],
target = df_hogares_train_smote$Pobre,
K=5)
X_train <- model.matrix(Pobre ~  maximo_grado_educ + hacinamiento + proporcion_cotizantes +  num_niños + mujer_soltera + tipo_vivienda, df_hogares_train_smote)
X_train <- X_train[, -1]
colnames(X_train)<-paste0("X",seq(1,6))
colnames(X_train)
X_train<-data.frame(X_train)
smote_data <- SMOTE(X = X_train, target = df_hogares_train_smote$Pobre, K = 5)
str(smote_data$data$class)
desempleado_logit_smote <- train(class ~.,
data = smote_data$data,
method = "glm",
family = "binomial",
trControl = ctrl_multiStats,
preProcess = c("center", "scale"),
metric = "Spec"
)
desempleado_logit_smote
test<- df_hogares_test_variables_smote  %>% mutate(Pobre =predict(desempleado_logit_smote,newdata = df_hogares_test_variables_smote,
type = "raw"))
df_hogares_test_variables_smote <- df_hogares_test_variables %>%
mutate(maximo_grado_educ = as.numeric(maximo_grado_educ),
tipo_vivienda = as.numeric(tipo_vivienda))
test<- df_hogares_test_variables_smote  %>% mutate(Pobre =predict(desempleado_logit_smote,newdata = df_hogares_test_variables_smote,
type = "raw"))
X_train
View(X_train)
colnames(df_hogares_test_variables_smote)<-paste0("X",seq(1,6))
colnames(df_hogares_test_variables_smote)
View(df_hogares_test_variables_smote)
df_hogares_test_variables_smote <- df_hogares_test_variables %>%
mutate(maximo_grado_educ = as.numeric(maximo_grado_educ),
tipo_vivienda = as.numeric(tipo_vivienda)) %>%
select(maximo_grado_educ, hacinamiento, proporcion_cotizantes,   num_niños,  mujer_soltera,  tipo_vivienda)
colnames(df_hogares_test_variables_smote)<-paste0("X",seq(1,6))
colnames(df_hogares_test_variables_smote)
X_train<-data.frame(df_hogares_test_variables_smote)
X_test <-data.frame(df_hogares_test_variables_smote)
test<- df_hogares_test_variables_smote  %>% mutate(desempleado_hat_smote_orig=predict(desempleado_logit_smote,newdata = X_test,
type = "raw"))
View(test)
df_hogares_test_variables3 <- df_hogares_test_variables_smote  %>%
mutate(Pobre=predict(desempleado_logit_smote,newdata = X_test,
type = "raw")) %>%
mutate(pobre = ifelse(pobre == "Yes", 1, 0))
df_hogares_test_variables3 <- df_hogares_test_variables_smote  %>%
mutate(Pobre=predict(desempleado_logit_smote,newdata = X_test,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0))
write.table(df_hogares_test_variables3, file = "smote.csv", row.names = FALSE, sep = ",")
df_hogares_test_variables3 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(desempleado_logit_smote,newdata = X_test,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0))
write.table(df_hogares_test_variables3, file = "smote.csv", row.names = FALSE, sep = ",")
View(df_hogares_test_variables3)
df_hogares_test_variables3 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(desempleado_logit_smote,newdata = X_test,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0)) %>%
select(id, Pobre)
write.table(df_hogares_test_variables3, file = "smote.csv", row.names = FALSE, sep = ",")
install.packages("xgboost")
source("~/Big Data & Machine Learning/Taller 2/Kaggle prediction 2.R", echo=TRUE)
grid_xbgoost <- expand.grid(nrounds = c(100,250),
max_depth = c(2,4),
eta = c(0.01,0.05),
gamma = c(0,1),
min_child_weight = c(10, 25),
colsample_bytree = c(0.33,0.66),
subsample = c(0.4,0.8))
set.seed(123)
Xgboost_tree <- train(lPobre ~ .,
data=df_hogares_train_backward,
method = "xgbTree",
trControl = fitControl,
tuneGrid=grid_xbgoost
)
grid_xbgoost <- expand.grid(nrounds = c(100,250),
max_depth = c(2,4),
eta = c(0.01,0.05),
gamma = c(0,1),
min_child_weight = c(10, 25),
colsample_bytree = c(0.33,0.66),
subsample = c(0.4,0.8))
set.seed(123)
Xgboost_tree <- train(Pobre ~ .,
data=df_hogares_train_backward,
method = "xgbTree",
trControl = fitControl,
tuneGrid=grid_xbgoost
)
df_hogares_train_xgboostd <- df_hogares_train_backward %>%
mutate(Pobre =factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
grid_xbgoost <- expand.grid(nrounds = c(100,250),
max_depth = c(2,4),
eta = c(0.01,0.05),
gamma = c(0,1),
min_child_weight = c(10, 25),
colsample_bytree = c(0.33,0.66),
subsample = c(0.4,0.8))
set.seed(123)
Xgboost_tree <- train(Pobre ~ .,
data=df_hogares_train_xgboostd,
method = "xgbTree",
trControl = fitControl,
tuneGrid=grid_xbgoost
)
df_hogares_train_xgboostd <- df_hogares_train_backward %>%
mutate(Pobre =factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
fitControl<-trainControl(method ="cv",
number=5)
grid_xbgoost <- expand.grid(nrounds = c(100,250),
max_depth = c(2,4),
eta = c(0.01,0.05),
gamma = c(0,1),
min_child_weight = c(10, 25),
colsample_bytree = c(0.33,0.66),
subsample = c(0.4,0.8))
set.seed(123)
Xgboost_tree <- train(Pobre ~ .,
data=df_hogares_train_xgboostd,
method = "xgbTree",
trControl = fitControl,
tuneGrid=grid_xbgoost
)
df_hogares_test_variables4 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(Xgboost_tree,newdata = df_hogares_test_variables,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0)) %>%
select(id, Pobre)
df_hogares_test_variables <- df_hogares_test %>%
left_join(df_personas_test_educ, by = "id") %>%
left_join(df_personas_test_ocup) %>%
left_join(df_personas_test_mujeres_cab) %>%
left_join(df_personas_test_niños) %>%
mutate(hacinamiento = Nper/P5010,
tipo_vivienda = as.factor(P5090),
num_niños = ifelse(is.na(num_niños), 0, num_niños),
proporcion_cotizantes = ifelse(is.na(proporcion_cotizantes), 0, proporcion_cotizantes),
niños_madre = num_niños*mujer_soltera)
df_personas_test_educ <- df_personas_test %>%
group_by(id) %>%
filter(P6040 >= 10) %>%  #filtrar los niños
reframe(maximo_grado_educ = as.factor(max(P6210, na.rm = TRUE)))
#Mujeres madres de hojar
df_personas_test_mujeres_cab <- df_personas_test %>%
group_by(id) %>%
mutate(hay_esposo = ifelse(P6050 == 2, 1, 0),
esposo = cumsum(hay_esposo),
n_personas = cumsum(Orden),
mujer_soltera = ifelse(P6020 == 2 & P6050 == 1 & esposo == 0 & n_personas > 1, 1, 0)) %>%
filter(P6050 == 1) %>%
select(id, mujer_soltera)
#Ocupados
df_personas_test_ocup <- df_personas_test %>%
mutate(cotiza = case_when(P6920 == 1 | P6920 == 3 ~ 1, TRUE ~ 0)) %>%
group_by(id) %>%
filter(Pet == 1) %>%  #filtrar los niños
reframe(ocupados = sum(Oc, na.rm = TRUE),
pet = sum(Pet, na.rm = TRUE),
proporcion_ocupados = ocupados/pet,
cotizantes = sum(cotiza),
proporcion_cotizantes = cotizantes/pet) %>%
mutate(proporcion_cotizantes = ifelse(proporcion_cotizantes > 1, 1, proporcion_cotizantes))
#Número de niños en el hogar
df_personas_test_niños <- df_personas_test %>%
group_by(id) %>%
filter(P6040 <= 13) %>%  #filtrar los niños
reframe(num_niños = n())
#Hacinamiento y tipo_vivienda
df_hogares_test_variables <- df_hogares_test %>%
left_join(df_personas_test_educ, by = "id") %>%
left_join(df_personas_test_ocup) %>%
left_join(df_personas_test_mujeres_cab) %>%
left_join(df_personas_test_niños) %>%
mutate(hacinamiento = Nper/P5010,
tipo_vivienda = as.factor(P5090),
num_niños = ifelse(is.na(num_niños), 0, num_niños),
proporcion_cotizantes = ifelse(is.na(proporcion_cotizantes), 0, proporcion_cotizantes),
niños_madre = num_niños*mujer_soltera)
df_hogares_test_variables4 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(Xgboost_tree,newdata = df_hogares_test_variables,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0)) %>%
select(id, Pobre)
write.table(df_hogares_test_variables4, file = "xgboost.csv", row.names = FALSE, sep = ",")
View(df_hogares_test_variables4)
Xgboost_tree
model_adaboost <- boosting(Pobre ~.,
data=df_hogares_train_xgboostd,
boos=TRUE,
mfinal=50)
install.packages('adabag')                    # for fitting the adaboost model
install.packages('caret')                    # for general data preparation and model fitting
library(adabag)
library(caret)
# Data ---------
model_adaboost <- boosting(Pobre ~.,
data=df_hogares_train_xgboostd,
boos=TRUE,
mfinal=50)
model_adaboost <- boosting(Pobre ~.,
data=df_hogares_train_xgboostd,
boos=TRUE,
mfinal=1)
model_adaboost
View(df_hogares_train_xgboostd)
model_adaboost <- boosting(Pobre ~.,
data=df_hogares_train_xgboostd,
boos=TRUE,
mfinal=50)
model_adaboost <- boosting(Pobre ~.,
coeflearn = "Freund",
data = kyphosis,
mfinal=20)
model_adaboost <- boosting(Pobre ~.,
coeflearn = "Freund",
data = df_hogares_train_xgboostd,
mfinal=20)
View(df_hogares_train_backward)
df_hogares_train_xgboostd <- df_hogares_train_backward %>%
mutate(Pobre =factor(Pobre,levels=c(0,1),labels=c("No","Yes"))) %>%
select(Pobre, maximo_grado_educ, num_niños, proporcion_cotizantes)
model_adaboost <- boosting(Pobre ~.,
coeflearn = "Freund",
data = df_hogares_train_xgboostd,
mfinal=20)
df_hogares_train_adaboost <- df_hogares_train_backward %>%
mutate(Pobre =factor(Pobre,levels=c(0,1),labels=c("No","Yes"))) %>%
select(Pobre, maximo_grado_educ, num_niños, proporcion_cotizantes)
model_adaboost <- boosting(Pobre ~.,
coeflearn = "Freund",
data = df_hogares_train_adaboost,
mfinal=20)
model_adaboost <- train(Pobre ~.,
trControl = fitControl,
method = "gbm",
tuneGrid=grid_gbm,
data = df_hogares_train_backward,
verbose = FALSE
)
model_adaboost <- train(Pobre ~.,
trControl = fitControl,
method = "gbm",
tuneGrid=grid_gbm,
data = df_hogares_train_xgboostd,
verbose = FALSE
)
grid_gbm<-expand.grid(n.trees=c(200,300,500),
interaction.depth=c(4,6),
shrinkage=c(0.001,0.01),
n.minobsinnode = c(10,30))
model_adaboost <- train(Pobre ~.,
trControl = fitControl,
method = "gbm",
tuneGrid=grid_gbm,
data = df_hogares_train_xgboostd,
verbose = FALSE
)
model_adaboost
grid_gbm
model_gradient_boost <- train(Pobre ~.,
trControl = fitControl,
method = "gbm",
tuneGrid=grid_gbm,
data = df_hogares_train_xgboostd,
verbose = FALSE
)
model_gradient_boost
complex_tree <- rpart(Pobre ~ .,
data    = df_hogares_train_adaboost,
method = "class",
cp = 0
)
complex_tree
complex_tree <- rpart(Pobre ~ .,
data    = df_hogares_train_adaboost,
method = "class",
cp = 0
)
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(complex_tree,newdata = df_hogares_test_variables,
type = "raw")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0)) %>%
select(id, Pobre)
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(complex_tree,newdata = df_hogares_test_variables,
type = "prob")) %>%
mutate(Pobre = ifelse(Pobre == "Yes", 1, 0)) %>%
select(id, Pobre)
write.table(df_hogares_test_variables5, file = "complex_tree.csv", row.names = FALSE, sep = ",")
View(df_hogares_test_variables5)
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(complex_tree,newdata = df_hogares_test_variables,
type = "prob"))
View(df_hogares_test_variables5)
complex_tree
df_hogares_complex_tree <- df_hogares_train_adaboost  %>%
mutate(prob=predict(complex_tree,newdata = df_hogares_train_adaboost,
type = "prob"))
View(df_hogares_complex_tree)
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree,predicted = df_hogares_complex_tree[,6])
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree,predicted = df_hogares_complex_tree[,6])
f_hogares_complex_tree[,6]
df_hogares_complex_tree <- df_hogares_train_adaboost  %>%
mutate(prob=predict(complex_tree,newdata = df_hogares_train_adaboost,
type = "prob"))
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree,predicted = df_hogares_complex_tree[,6])
df_hogares_complex_tree <- df_hogares_train_adaboost  %>%
mutate(prob=predict(complex_tree,newdata = df_hogares_train_adaboost,
type = "prob"),
Pobre = ifelse(Pobre = "Yes", 1, 0))
df_hogares_complex_tree <- df_hogares_train_adaboost  %>%
mutate(prob=predict(complex_tree,newdata = df_hogares_train_adaboost,
type = "prob"),
Pobre = ifelse(Pobre == "Yes", 1, 0))
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree$Pobre,predicted = df_hogares_complex_tree[,6])
df_hogares_complex_tree$Pobre
df_hogares_complex_tree[,6]
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree$Pobre,predicted = df_hogares_complex_tree$prob)
colnames(df_hogares_complex_tree)
df_hogares_complex_tree <- df_hogares_train_adaboost  %>%
mutate(prob=predict(complex_tree,newdata = df_hogares_train_adaboost,
type = "prob"),
Pobre = ifelse(Pobre == "Yes", 1, 0))
pred_prob <- predict(complex_tree, newdata = df_hogares_complex_tree, type = "prob")
pred_prob
aucval_arbol <- Metrics::auc(actual = df_hogares_complex_tree$Pobre,predicted = pred_prob[,2])
aucval_arbol
pred_test <- predict(complex_tree, newdata = df_hogares_test_variables, type = "prob")
pred_test
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
mutate(Pobre=predict(model_gradient_boost,newdata = df_hogares_test_variables,
type = "raw")) %>%
cbind(pred_test[,2]) %>%
mutate(Pobre = ifelse(pred_test > aucval_arbol, 1, 0)) %>%
select(id, Pobre)
pred_test <- predict(complex_tree, newdata = df_hogares_test_variables, type = "prob")
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
cbind(pred_test[,2]) %>%
mutate(Pobre = ifelse(pred_test > aucval_arbol, 1, 0)) %>%
select(id, Pobre)
View(df_hogares_test_variables5)
pred_test
pred_test[,2]
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
cbind(pred_test[,2])
View(df_hogares_test_variables5)
View(pred_test)
pred_test <- predict(complex_tree, newdata = df_hogares_test_variables, type = "prob")
pred_test <- pred_test[,2]
pred_test
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
cbind(pred_test)
View(df_hogares_test_variables5)
df_hogares_test_variables5 <- df_hogares_test_variables  %>%
cbind(pred_test) %>%
mutate(Pobre = ifelse(pred_test > aucval_arbol, 1, 0)) %>%
select(id, Pobre)
View(df_hogares_test_variables5)
write.table(df_hogares_test_variables5, file = "complex_tree.csv", row.names = FALSE, sep = ",")
View(df_hogares_test_variables5)
aucval_arbol
Metrics::auc(actual = df_hogares_complex_tree$Pobre,predicted = pred_prob[,2])
aucval_arbol
pred_prob
aucval_arbol
